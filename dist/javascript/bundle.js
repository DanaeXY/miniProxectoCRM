(()=>{"use strict";var o={400:(o,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Comunicacion=void 0,t.Comunicacion=class{static datos;static async metodoGet(o){console.log("this.endpoint ",o);let t=await fetch(o);this.datos=await t.json()}static async metodoPost(o){let t={method:"post",headers:{"Content-type":"application/json"},body:JSON.stringify({dato1:"mariano",dato2:"pepito",dato3:5})},e=await fetch(o,t);this.datos=await e.json()}static get respostaServidor(){return this.datos}}},988:(o,t,e)=>{e.r(t)}},t={};function e(i){var a=t[i];if(void 0!==a)return a.exports;var n=t[i]={exports:{}};return o[i](n,n.exports,e),n.exports}e.r=o=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(o,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(o,"__esModule",{value:!0})},(()=>{const o=e(400);if(e(988),"/paxina-app"==location.pathname){const t=document.querySelector("#solicitudeGET"),e=document.querySelector("#solicitudePOST");t.addEventListener("click",(async()=>{await o.Comunicacion.metodoGet("/recibo-datos-do-servidor"),console.log(o.Comunicacion.respostaServidor)})),e.addEventListener("click",(async()=>{await o.Comunicacion.metodoPost("/envio-datos-o-servidor"),console.log(o.Comunicacion.respostaServidor)}))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qYXZhc2NyaXB0L2J1bmRsZS5qcyIsIm1hcHBpbmdzIjoiNkdBQUEscUJBRUlBLGFBRUEsc0JBQWFDLENBQVVDLEdBQ25CQyxRQUFRQyxJQUFJLGlCQUFpQkYsR0FDN0IsSUFBSUcsUUFBcUJDLE1BQU1KLEdBQy9CSyxLQUFLQyxZQUFjSCxFQUFhSSxNQUNwQyxDQUVBLHVCQUFhQyxDQUFXUixHQU9wQixJQU1JUyxFQUFjLENBQ2RDLE9BQVEsT0FDUkMsUUFBUyxDQUNMLGVBQWUsb0JBRW5CQyxLQUFLQyxLQUFLQyxVQVhnQixDQUMxQkMsTUFBTyxVQUNQQyxNQUFPLFNBQ1BDLE1BQU8sS0FVUEMsUUFBaUJkLE1BQU1KLEVBQVNTLEdBQ3BDSixLQUFLQyxZQUFjWSxFQUFTWCxNQUVoQyxDQUVBLDJCQUFXWSxHQUNQLE9BQU9kLEtBQUtDLEtBQ2hCLEUseUJDcENBYyxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWFFLFFBR3JCLElBQUlDLEVBQVNOLEVBQXlCRSxHQUFZLENBR2pERyxRQUFTLENBQUMsR0FPWCxPQUhBRSxFQUFvQkwsR0FBVUksRUFBUUEsRUFBT0QsUUFBU0osR0FHL0NLLEVBQU9ELE9BQ2YsQ0NyQkFKLEVBQW9CTyxFQUFLSCxJQUNILG9CQUFYSSxRQUEwQkEsT0FBT0MsYUFDMUNDLE9BQU9DLGVBQWVQLEVBQVNJLE9BQU9DLFlBQWEsQ0FBRUcsTUFBTyxXQUU3REYsT0FBT0MsZUFBZVAsRUFBUyxhQUFjLENBQUVRLE9BQU8sR0FBTyxFLE1DSjlELGVBSUEsR0FGQSxPQUV3QixlQUFyQkMsU0FBU0MsU0FBMEIsQ0FDbEMsTUFBTUMsRUFBaUNDLFNBQVNDLGNBQWMsa0JBQ3hEQyxFQUFrQ0YsU0FBU0MsY0FBYyxtQkFPL0RGLEVBQVlJLGlCQUFpQixTQUFRQyxnQkFFM0IsRUFBQUMsYUFBYTNDLFVBREosNkJBRWZFLFFBQVFDLElBQUksRUFBQXdDLGFBQWF2QixpQkFBaUIsSUFHOUNvQixFQUFhQyxpQkFBaUIsU0FBUUMsZ0JBRTVCLEVBQUFDLGFBQWFsQyxXQURKLDJCQUVmUCxRQUFRQyxJQUFJLEVBQUF3QyxhQUFhdkIsaUJBQWlCLEdBR2xELEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb250eXBlc2NyaXB0MC8uL3NyYy9jbGFzZXMvQ29tdW5pY2FjaW9uLnRzIiwid2VicGFjazovL2NvbnR5cGVzY3JpcHQwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NvbnR5cGVzY3JpcHQwL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vY29udHlwZXNjcmlwdDAvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIENvbXVuaWNhY2lvbntcclxuICAgIFxyXG4gICAgc3RhdGljIGRhdG9zOiBPYmplY3Q7XHJcbiAgICBcclxuICAgIHN0YXRpYyBhc3luYyBtZXRvZG9HZXQoZW5kcG9pbnQ6IHN0cmluZyl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJ0aGlzLmVuZHBvaW50IFwiLGVuZHBvaW50KVxyXG4gICAgICAgIGxldCBkYXRvU2Vydmlkb3IgPSBhd2FpdCBmZXRjaChlbmRwb2ludCk7XHJcbiAgICAgICAgdGhpcy5kYXRvcyA9IGF3YWl0IGRhdG9TZXJ2aWRvci5qc29uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIG1ldG9kb1Bvc3QoZW5kcG9pbnQ6IHN0cmluZyl7XHJcbiAgICAgICAgdHlwZSBkYXRvc09ieGV0byA9IHtcclxuICAgICAgICAgICAgZGF0bzE6IHN0cmluZyxcclxuICAgICAgICAgICAgZGF0bzI6IHN0cmluZyxcclxuICAgICAgICAgICAgZGF0bzM6IG51bWJlclxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBsZXQgZGF0b3NFbnZpbzogZGF0b3NPYnhldG8gPSB7XHJcbiAgICAgICAgICAgIGRhdG8xOiBcIm1hcmlhbm9cIixcclxuICAgICAgICAgICAgZGF0bzI6IFwicGVwaXRvXCIsXHJcbiAgICAgICAgICAgIGRhdG8zOiA1XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgbGV0IG9ieGV0b0VudmlvID0ge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgXCJDb250ZW50LXR5cGVcIjpcImFwcGxpY2F0aW9uL2pzb25cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBib2R5OkpTT04uc3RyaW5naWZ5KGRhdG9zRW52aW8pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXNwb3N0YSA9IGF3YWl0IGZldGNoKGVuZHBvaW50LG9ieGV0b0VudmlvKTtcclxuICAgICAgICB0aGlzLmRhdG9zID0gYXdhaXQgcmVzcG9zdGEuanNvbigpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0IHJlc3Bvc3RhU2Vydmlkb3IoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRvc1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiXHJcbmltcG9ydCB7IENvbXVuaWNhY2lvbiB9IGZyb20gXCIuL2NsYXNlcy9Db211bmljYWNpb25cIjtcclxuLy9pbXBvcnQgZm9uZG8gZnJvbSBcIi4vZm9uZG9CdWVuby5wbmdcIjtcclxuaW1wb3J0ICcuL2Nzcy9tYWluLmNzcyc7IC8vIFRlbW9zIHF1ZSBpbnRlZ3JhciBvIENTUyBwYXJhIHF1ZSB3ZWJwYWNrIG8gY29tcGlsZVxyXG5cclxuaWYobG9jYXRpb24ucGF0aG5hbWUgPT0gXCIvcGF4aW5hLWFwcFwiKXtcclxuICAgIGNvbnN0IHJlZkJvdG9uR0VUOiBIVE1MQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc29saWNpdHVkZUdFVFwiKTtcclxuICAgIGNvbnN0IHJlZkJvdG9uUE9TVDogSFRNTEJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NvbGljaXR1ZGVQT1NUXCIpXHJcbiAgICBcclxuICAgIC8vIElOVFJPRFVaQ08gRE9VUyBCT1TDk05TIFNJTVVMQU5ETyAnRVZFTlRPUycgXHJcbiAgICAvLyBVTiBQT1NUXHJcbiAgICAvLyBVTiBHRVQgXHJcbiAgICBcclxuXHJcbiAgICByZWZCb3RvbkdFVC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixhc3luYyAoKSA9PntcclxuICAgICAgICBsZXQgZW5kcG9pbnQgPSBcIi9yZWNpYm8tZGF0b3MtZG8tc2Vydmlkb3JcIjtcclxuICAgICAgICBhd2FpdCBDb211bmljYWNpb24ubWV0b2RvR2V0KGVuZHBvaW50KVxyXG4gICAgICAgIGNvbnNvbGUubG9nKENvbXVuaWNhY2lvbi5yZXNwb3N0YVNlcnZpZG9yKVxyXG4gICAgICAgIC8vIFVUSUxJWkFSw41BTU9TIE8gREFUTyBRVUUgQ0hFR0EgRE8gU0VSVklET1IgUEFSQSBQSU5UQVJcclxuICAgIH0pXHJcbiAgICByZWZCb3RvblBPU1QuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsYXN5bmMgKCk9PntcclxuICAgICAgICBsZXQgZW5kcG9pbnQgPSBcIi9lbnZpby1kYXRvcy1vLXNlcnZpZG9yXCJcclxuICAgICAgICBhd2FpdCBDb211bmljYWNpb24ubWV0b2RvUG9zdChlbmRwb2ludClcclxuICAgICAgICBjb25zb2xlLmxvZyhDb211bmljYWNpb24ucmVzcG9zdGFTZXJ2aWRvcilcclxuICAgICAgICAvLyBVVElMSVpBUsONQU1PUyBPIERBVE8gUVVFIENIRUdBIERPIFNFUlZJRE9SIFBBUkEgUElOVEFSXHJcbiAgICB9KVxyXG59XHJcbiJdLCJuYW1lcyI6WyJzdGF0aWMiLCJtZXRvZG9HZXQiLCJlbmRwb2ludCIsImNvbnNvbGUiLCJsb2ciLCJkYXRvU2Vydmlkb3IiLCJmZXRjaCIsInRoaXMiLCJkYXRvcyIsImpzb24iLCJtZXRvZG9Qb3N0Iiwib2J4ZXRvRW52aW8iLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRvMSIsImRhdG8yIiwiZGF0bzMiLCJyZXNwb3N0YSIsInJlc3Bvc3RhU2Vydmlkb3IiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwicmVmQm90b25HRVQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJyZWZCb3RvblBPU1QiLCJhZGRFdmVudExpc3RlbmVyIiwiYXN5bmMiLCJDb211bmljYWNpb24iXSwic291cmNlUm9vdCI6IiJ9